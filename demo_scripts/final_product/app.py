from flask import Flask, request
from grafana_api.grafana_face import GrafanaFace
import json
import pynetbox

app = Flask(__name__)

@app.route("/", methods=["POST"])
def index():
    if not request.is_json:
        return {"error": True, "message": "Request is not JSON"}

    data = request.get_json() # get_json will format the POST data into a python dictionary

    # Lets also perform some basic checks, we only want to generate our dashboards if the model of POST data is for a device and the event is created or updated... # Devices that are deleted in netbox will need to be deleted from Grafana...
    if data["model"] != "device":
        return {"error": True, "message": "only device model is supported"}
    if data["event"] not in ["created", "updated"]:
        return {"error": True, "message": "only created and updated are supported"}

    device_id = data["data"]["id"]
    nb = pynetbox.api(
        'http://192.168.0.16:32768', # Your Netbox Host URL
        token='838e37d04d68a2a3eeb3a08904b27ac1d52004b0' # Your Netbox API Token generated in the Admin view
    )
    device_object = nb.dcim.devices.get(device_id) # From the ID found in the POST data, we can create a python object for the netbox device
    grafana_dashboard = generate_dashboard(device_object, nb) # Call our function we created to generate the JSON data
    if not grafana_dashboard:
        return {"error": True, "message": grafana_dashboard} # We return an error because if the primary ipv4 address is not found on the netbox device, we return False...
    result = add_dashboard_to_grafana(grafana_dashboard) # Call our other function that is used to take the JSON dashboard and create it on Grafana
    print(json.dumps(result, indent=4)) # Print the grafana api result for debug/troubleshooting purpose
    return {"error": False, "result": result}

def generate_dashboard(netbox_object, nb):
    print("Generating dashboard for device: {}".format(netbox_object.name))
    if not netbox_object.primary_ip4:
        print("Ensure device has a primary ip4 address...")
        return False
    ip_address = str(netbox_object.primary_ip4)[:-3] # We will use this as our "agent_host" in the database query... Ensure you also have a telegraf configuration file for this IP address with the SNMP community configured
    device_interfaces = nb.dcim.interfaces.filter(device=netbox_object) # Grab all the interfaces in Netbox. A cool idea would be to have a script SSH into your device and automatically update Netbox with the relevant details. This is very easy to achieve with Netmiko and TextFSM modules

    base_template = open("dashboard.json").read() # Read the base JSON template
    interface_template = open("interface_panel.json").read() # Read the base Interface JSON template

    base_template = base_template.replace("{{ dashboard_title }}", netbox_object.name) # We replace a variable we stored in the file to make it easier here...

    interface_templates = []
    for interface in device_interfaces:
        _t = interface_template # If we use interface_template directly, the variable in memory will be overwritten and we will encounter problems with our next interface we try to generate...
        replace_values = {"{{ host }}": ip_address, "{{ interface }}": interface.name, "{{ panel_title }}": "{} - Autogenerated".format(interface.name)}
        for k,v in replace_values.items():
            _t = _t.replace(k,v) # Not the most tidy way but it does what we need it to do. You can build this JSON model yourself instead of using a file and performing the "replace" function and treating the full file as a string.
        interface_templates.append(json.loads(_t))

    base_template = json.loads(base_template) # Load from string to python dict
    base_template["panels"] = interface_templates # Append out interfaces to a new key in our base template called panels.

    return base_template

def add_dashboard_to_grafana(dashboard):
    api = GrafanaFace(
        auth="eyJrIjoiVTRUNlVNY0dHS1F3aU9JZnc1a2hWaFFpQUdVWFVhUWYiLCJuIjoiZ3JhZmFuYS1kZW1vLWRldmljZSIsImlkIjoxfQ==",
        host="192.168.0.16",
        port=3000,
        protocol="http"
    ) # Documentation can be found on the grafana-api github...  Https can be used along with the verify keyword in the event of you not properly setting up the trust

    print("Trying to add dashboard to Grafana")
    dashboard = api.dashboard.update_dashboard({"dashboard": dashboard, "overwrite": True}) # We overwrite any dashboards with the current dashboard title. Dashboards need unique names in the same folder (you can also specify a folderId if required...

    return dashboard

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=3001, debug=True)
